{"version":3,"sources":["components/main/StaffAdd.js","components/main/StaffList.js","components/main/Result.js","components/main/RandomHPPDInfo.js","components/main/Scenario.js","assets/Left-aligned-square-gray-2.png","components/header/Header.js","components/footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["StaffAdd","props","generateUUID","s","hexDigits","i","substr","Math","floor","random","join","getShiftValue","shiftString","shiftValue","handleAdd","value","preventDefault","formData","FormData","target","formDataObj","Object","fromEntries","entries","uuid","shiftTotal","parseInt","quantity","shift","staff","id","type","staffType","onStaffAdd","handleClose","setState","handleShow","state","open","show","qtyVals","push","qtyList","map","qty","className","onClick","this","Modal","animation","onHide","Form","onSubmit","Header","Title","Body","Group","controlId","required","Label","Control","as","name","Footer","Button","variant","React","Component","StaffList","staffList","staffs","length","scope","Result","getStaffHours","totalHours","calculation","info","retVal","census","HPPD","calc","toFixed","RandomHPPDInfo","Min","Max","Range","Rand","round","setRandomValues","randomHPPD","randomCensus","unit","bedUnit","onInfoChange","Scenario","handleStaffChange","handleStaffAdd","staffItem","console","log","staffCopy","handleInfoChange","results","staffNum","num","center","handleInputChange","bind","event","checked","test","prevState","assign","alert","htmlFor","placeholder","onChange","onStaffChange","onReload","window","location","reload","src","logo","alt","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5d85ce2.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport './StaffAdd.css';\n\n// also noticing another bug where the url is holding the value of the selected items in the modal. We should look at how to fix this in the next sprint because it might look different after the refactor\nclass StaffAdd extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\topen: false,\n\t\t\tshow: false,\n\t\t};\n\t}\n\n\t//Used to generate an ID for each Staff entry.  We might want ID later to manipulate the staffs collection.\n\tgenerateUUID = () => {\n\t\tvar s = [];\n\t\tvar hexDigits = \"0123456789abcdef\";\n\t\tfor (var i = 0; i < 36; i++) {\n\t\t\ts[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n\t\t}\n\t\ts[14] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\n\t\ts[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n\t\ts[8] = s[13] = s[18] = s[23] = \"-\";\n\t\treturn s.join(\"\");\n\t}\n\tgetShiftValue = (shiftString) => {\n        //considered changing shift to just be 12,...8 so parseint would just work\n        //but additional information from string i.e. day, night might be needed.\n        let shiftValue = 0;\n        switch (shiftString) {\n            case '12 Hours Day':\n                shiftValue = 12;\n                break;\n            case '12 Hours Night':\n                shiftValue = 12;\n                break;\n            case '8 Hours Day':\n                shiftValue = 8;\n                break;\n            case '8 Hours Evening':\n                shiftValue = 8;\n                break;\n            case '8 Hours Night':\n                shiftValue = 8;\n                break;\n            default:\n                shiftValue = 0;\n        }\n\n        return shiftValue;\n    }\n\thandleAdd = (value) => {\n\t\tvalue.preventDefault();\n\t\tconst formData = new FormData(value.target),\n\t\t\tformDataObj = Object.fromEntries(formData.entries())\n\n\t\tvar uuid = this.generateUUID();\n\t\tvar shiftTotal = parseInt(formDataObj.quantity) * this.getShiftValue(formDataObj.shift);\n\t\tlet staff = { id: uuid, quantity: formDataObj.quantity, type: formDataObj.staffType, shift: formDataObj.shift, shiftTotal: shiftTotal };\n\n\t\tthis.props.onStaffAdd(staff);\n\t\tthis.handleClose();\n\t}\n\n\t\n\n\thandleClose = () => {\n\t\tthis.setState({ \"show\": false });\n\t}\n\thandleShow = () => {\n\t\tthis.setState({ \"show\": true });\n\t}\n\n\trender() {\n\n\n\t\tlet qtyVals = [];\n\t\tfor (let i = 1; i <= 50; i++) {\n\t\t\tqtyVals.push(i);\n\t\t}\n\t\tconst qtyList = qtyVals.map((qty) =>\n\t\t\t<option key={qty} value={qty}>{qty}</option>\n\t\t);\n\n\t\treturn (\n            <div>  \n\t\t\t<button type=\"button\" className=\"btn btn-outline-primary\" onClick={this.handleShow}>Add Staff</button>\n\t\t\t\t\n\t\t\t\t<Modal animation={false} show={this.state.show} onHide={this.handleClose}>\n\t\t\t\t\t<Form onSubmit={this.handleAdd}>\n\t\t\t\t\t\t<Modal.Header>\n\t\t\t\t\t\t\t<Modal.Title>Select your staff member</Modal.Title>\n\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t<Modal.Body>\n\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"staffType\" required>\n\t\t\t\t\t\t\t\t<Form.Label>Staff Type</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control as=\"select\" name=\"staffType\">\n\t\t\t\t\t\t\t\t\t<option value=\"RN\">RN</option>\n\t\t\t\t\t\t\t\t\t<option value=\"LVN\">LVN</option>\n\t\t\t\t\t\t\t\t\t<option value=\"Unlicensed\">Unlicensed</option>\n\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"shiftType\" required>\n\t\t\t\t\t\t\t\t<Form.Label>Shift Type</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control as=\"select\" name=\"shift\" className=\"caret\">\n\t\t\t\t\t\t\t\t\t<option value=\"12 Hours Day\">12 Hours Day</option>\n\t\t\t\t\t\t\t\t\t<option value=\"12 Hours Night\">12 Hours Night</option>\n\t\t\t\t\t\t\t\t\t<option value=\"8 Hours Day\">8 Hours Day</option>\n\t\t\t\t\t\t\t\t\t<option value=\"8 Hours Evening\">8 Hours Evening</option>\n\t\t\t\t\t\t\t\t\t<option value=\"8 Hours Night\">8 Hours Night</option>\n\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"quantity\" required>\n\t\t\t\t\t\t\t\t<Form.Label>Quantity</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control as=\"select\" name=\"quantity\">\n\t\t\t\t\t\t\t\t\t{qtyList}\n\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t<Button variant=\"outline-secondary\" onClick={this.handleClose}>\n\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button variant=\"outline-primary\" type=\"submit\">\n\t\t\t\t\t\t\t\tAdd new Staff\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t</Form>\n\t\t\t\t</Modal>\n\t\t\t\t</div>  \n\t\t);\n\t}\n\n\n\n}\nexport default StaffAdd\n","import React from 'react';\nimport './StaffList.css';\n\nclass StaffList extends React.Component {\n\n\n\n    render() {\n\n        const staffList = this.props.staffs.map((staff, i) =>\n            <tr key={staff.id} id={staff.id} >\n                <td>{staff.type}</td>\n                <td>{staff.quantity}</td>\n                <td>{staff.shift}</td>\n                <td>{staff.shiftTotal}</td>\n            </tr>\n\n        );\n\n        return (\n           \n                    <table className=\"table table-striped table-hover\" id=\"staffCont\">\n                        <thead className=\"table-BSU\">\n                            {staffList.length > 0 ? <tr>\n                                <th scope=\"col\">Staff Type</th>\n                                <th scope=\"col\">Quantity</th>\n                                <th scope=\"col\">Shift Type</th>\n                                <th scope=\"col\">Shift Total</th>\n                            </tr> : false}\n                        </thead>\n                        <tbody>\n\n                            {staffList}\n                        </tbody>\n\n                    </table>\n        \n        );\n    }\n}\n\nexport default StaffList;\n","import React from 'react';\nimport './Result.css';\n\nclass Result extends React.Component {\n\n    getShiftValue = (shiftString) => {\n        //considered changing shift to just be 12,...8 so parseint would just work\n        //but additional information from string i.e. day, night might be needed.\n        let shiftValue = 0;\n        switch (shiftString) {\n            case '12 Hours Day':\n                shiftValue = 12;\n                break;\n            case '12 Hours Night':\n                shiftValue = 12;\n                break;\n            case '8 Hours Day':\n                shiftValue = 8;\n                break;\n            case '8 Hours Evening':\n                shiftValue = 8;\n                break;\n            case '8 Hours Night':\n                shiftValue = 8;\n                break;\n            default:\n                shiftValue = 0;\n        }\n\n        return shiftValue;\n    }\n\n\n    getStaffHours = (staffs) => {\n        let totalHours = 0;\n        for (var i = 0; i < staffs.length; i++) {\n            //Do we need to check on stafftype Here?\n            let shiftValue = this.getShiftValue(staffs[i].shift);\n            let quantity = parseInt(staffs[i].quantity);\n\n            totalHours += shiftValue * quantity;\n        }\n        return totalHours;\n    }\n\n\n    calculation = (info, staffs) => {\n\n        let censusVal = parseInt(info.census);\n        let HPPDVal = parseInt(info.HPPD);\n\n        let patients = censusVal;\n\n        let totalHPPD = (patients * HPPDVal)\n\n        let staffHours = this.getStaffHours(staffs);\n\n        let retVal = totalHPPD - staffHours;\n        \n        if(retVal){\n            return retVal;\n        }\n\n        return \"--\";\n\n    }\n\n    render() {\n\n        const calc = this.calculation(this.props.info, this.props.staffs);\n\n        return (\n\n\n                <div className=\"card\">\n                    <div className=\"card-header\">Hours for Day Remaining</div>\n                    <div id=\"results\" className=\"card-body\">\n                        <label>HPPD</label>\n                        <h1 className={calc < 0 ? \"negCalc\" : \"\"}>{calc !== \"--\" ? calc.toFixed(0) : calc}</h1>\n\n                    </div>\n                </div>\n\n\n        );\n    }\n}\n\nexport default Result;\n","import React from 'react';\nimport './RandomHPPDInfo.css';\n\nclass RandomHPPDInfo extends React.Component {\n   \n    random = (Min,Max) =>{\n\t\tvar Range = Max - Min;   \n\t\tvar Rand = Math.random();   \n\t\treturn (Min + Math.round(Rand * Range));\n\t}\n\t\n\n    setRandomValues = () =>\n      {\n\n        let randomHPPD = this.random(8,24);\n        let randomCensus = this.random(1,100);\n        let randomBedUnit = this.random(10,1000);\n\n        let info ={\n            unit:\"Random Hospital Unit\",\n            HPPD: randomHPPD,\n            bedUnit:randomBedUnit,\n            census: randomCensus,\n        }\n\n\n        this.props.onInfoChange(info); \n  \n      }  \n\n    render() {\n\n\n        return (\n            <button type=\"button\" className=\"btn btn-outline-primary\" onClick={this.setRandomValues}>Random Scenario</button>\n        );\n    }\n}\n\nexport default RandomHPPDInfo;\n","import React from 'react';\n//import { Form, InputGroup, Card } from \"react-bootstrap\";\nimport './Scenario.css';\nimport StaffAdd from './StaffAdd'\nimport StaffList from './StaffList'\nimport Result from './Result'\nimport RandomHPPDInfo from './RandomHPPDInfo'\n\nclass Scenario extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            results: \"\",\n            staffNum: \"The Results:\",\n            num: \"\",\n            center: { \"text-align\": 'center' },\n            staffs: [],\n            info: {\n                unit: \"\",\n                HPPD: \"\",\n                bedUnit: \"\",\n                census: \"\",\n            }\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    handleStaffChange = (staff) => {\n        this.setState({ staffs: staff });\n    }\n    handleStaffAdd = (staffItem) => {\n\n        console.log(staffItem);\n        let staffCopy = [...this.state.staffs, staffItem];\n        this.setState({ staffs: staffCopy });\n\n    }\n\n    handleInfoChange = (info) => {\n        this.setState({ info: info });\n    }\n\n\n    handleInputChange(event) {\n\n        //Maybe look at using Formik library?\n        //https://react-bootstrap.github.io/components/forms/#forms-validation-native\n        //https://react-bootstrap.github.io/components/forms/#forms-validation-libraries\n\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        if (name !== 'unit') {\n            if (value && !(/^\\+?[1-9][0-9]*$/.test(value))) {\n                alert(\"Only numbers(positive integers) can be entered\");\n                return;\n            }\n        }\n\n        //https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n        this.setState(prevState => {\n            let info = Object.assign({}, prevState.info);   // creating copy of state variable info\n            info[name] = value;                             // update the name property, assign a new value                 \n            return { info };                                // return new object info object\n        })\n\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <div className=\"row mt-5\">\n\n                     <div className=\"col-md-3 col-sm-6 order-sm-last\">\n                        <Result staffs={this.state.staffs} info={this.state.info} ></Result>\n                    </div>\n                    \n                    <div className=\"col-md-9 col-sm-6 order-sm-first\">\n                        <form className=\"row\">\n\n                            <div className=\"col-md-12\">\n                                <label htmlFor=\"unit\" className=\"form-label\">Hospital unit</label>\n                                <input className=\"form-control\" type=\"text\" name=\"unit\" id=\"unit\" data-testid=\"unit-id\" placeholder=\"Hospital Unit\" onChange={this.handleInputChange} value={this.state.info.unit} />\n                            </div>\n\n                            <div className=\"col-md-4\">\n                                <label htmlFor=\"HPPD\" className=\"form-label\">HPPD</label>\n                                <input className=\"form-control\" type=\"text\" name=\"HPPD\" id=\"HPPD\" data-testid=\"hppd-id\" placeholder=\"HPPD\" onChange={this.handleInputChange} value={this.state.info.HPPD} />\n                            </div>\n\n                            <div className=\"col-md-4\">\n                                <label htmlFor=\"bedUnit\" className=\"form-label\">Number of beds</label>\n                                <input className=\"form-control\" type=\"text\" name=\"bedUnit\" id=\"bedUnit\" data-testid=\"numbeds-id\" placeholder=\"Number of Beds\" onChange={this.handleInputChange} value={this.state.info.bedUnit} />\n                            </div>\n\n                            <div className=\"col-md-4\">\n                                <label htmlFor=\"census\" className=\"form-label\">Census</label>\n                                <input className=\"form-control\" type=\"text\" name=\"census\" id=\"census\" data-testid=\"census-id\" placeholder=\"Census\" onChange={this.handleInputChange} value={this.state.info.census} />\n                            </div>\n\n                        </form>\n                        <div className=\"row\">\n                            <div className=\"col-md-4 mt-4 \" >\n                                <StaffAdd onStaffChange={this.handleStaffChange} onStaffAdd={this.handleStaffAdd} staffs={this.state.staffs} />\n                            </div>\n                            <div className=\"col-md-4 mt-4 \">\n                                <RandomHPPDInfo onInfoChange={this.handleInfoChange} />\n                            </div>\n                        </div>\n\n                    </div>\n                    \n                    \n\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-md-9\">\n                        <StaffList staffs={this.state.staffs} ></StaffList>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Scenario;\n","export default __webpack_public_path__ + \"static/media/Left-aligned-square-gray-2.11bbe62b.png\";","import './Header.css';\nimport React from 'react';\nimport logo from '../../assets/Left-aligned-square-gray-2.png';\n\nclass Header extends React.Component {\n\n    onReload = () => {\n        console.log(\"Reload clicked\");\n        window.location.reload();\n    }\n\n    render() {\n        return (\n\n            <header>\n                <nav className=\"navbar navbar-light bg-light\">\n                    <div className=\"container-fluid\">\n                        <img src={logo} alt=\"Logo\" data-testid=\"reload\" onClick={this.onReload} />\n                        \n                        <div id=\"navbarSupportedContent\">\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                                <li className=\"nav-item\">\n                                    <a className=\"nav-link\" href=\"https://www.boisestate.edu/nursing/\">BSU-Nursing Department</a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n                <div className=\"p-5 bg-primary text-white rounded\">\n                    <h1>In-Patient Staffing Simulator</h1>\n                </div>\n            </header>\n\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer(){\n    return(\n        <footer id=\"footer\">BSU Nursing |   Dr. Renee Walters   |   reneewalters@boisestate.edu</footer>\n    );\n}\n\nexport default Footer;","import './App.css';\n\nimport Scenario from './components/main/Scenario.js';\nimport Header from './components/header/Header.js';\nimport Footer from './components/footer/Footer.js';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <Header />\n        <Scenario />\n        <Footer />\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}