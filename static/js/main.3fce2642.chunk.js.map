{"version":3,"sources":["components/main/StaffAdd.js","components/main/StaffList.js","components/main/Result.js","components/main/RandomHPPDInfo.js","components/main/Scenario.js","assets/Left-aligned-square-gray-2.png","components/header/Header.js","components/footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["StaffAdd","props","generateUUID","s","hexDigits","i","substr","Math","floor","random","join","getShiftValue","shiftString","shiftValue","handleAdd","value","preventDefault","formData","FormData","target","formDataObj","Object","fromEntries","entries","uuid","shiftTotal","parseInt","quantity","shift","staff","id","type","staffType","onStaffAdd","handleClose","setState","handleShow","state","open","show","qtyVals","push","qtyList","map","qty","Container","fluid","Button","variant","onClick","this","Modal","animation","onHide","Form","onSubmit","Header","Title","Body","Group","className","controlId","required","Label","Control","as","name","Footer","React","Component","StaffList","staffList","staffs","Row","Col","length","Result","getStaffHours","totalHours","calculation","info","bedUnit","census","HPPD","calc","toFixed","RandomHPPDInfo","Min","Max","Range","Rand","round","setRandomValues","randomHPPD","randomCensus","unit","onInfoChange","Scenario","handleStaffChange","handleStaffAdd","staffItem","console","log","staffCopy","handleInfoChange","results","staffNum","num","center","handleInputChange","bind","event","checked","test","prevState","assign","alert","Card","InputGroup","size","onChange","onStaffChange","onReload","window","location","reload","Jumbotron","src","logo","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fce2642.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Button, Container, Form } from \"react-bootstrap\";\nimport './StaffAdd.css';\n\n// also noticing another bug where the url is holding the value of the selected items in the modal. We should look at how to fix this in the next sprint because it might look different after the refactor\nclass StaffAdd extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\topen: false,\n\t\t\tshow: false,\n\t\t};\n\t}\n\n\t//Used to generate an ID for each Staff entry.  We might want ID later to manipulate the staffs collection.\n\tgenerateUUID = () => {\n\t\tvar s = [];\n\t\tvar hexDigits = \"0123456789abcdef\";\n\t\tfor (var i = 0; i < 36; i++) {\n\t\t\ts[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n\t\t}\n\t\ts[14] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\n\t\ts[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n\t\ts[8] = s[13] = s[18] = s[23] = \"-\";\n\t\treturn s.join(\"\");\n\t}\n\tgetShiftValue = (shiftString) => {\n        //considered changing shift to just be 12,...8 so parseint would just work\n        //but additional information from string i.e. day, night might be needed.\n        let shiftValue = 0;\n        switch (shiftString) {\n            case '12 Hours Day':\n                shiftValue = 12;\n                break;\n            case '12 Hours Night':\n                shiftValue = 12;\n                break;\n            case '8 Hours Day':\n                shiftValue = 8;\n                break;\n            case '8 Hours Evening':\n                shiftValue = 8;\n                break;\n            case '8 Hours Night':\n                shiftValue = 8;\n                break;\n            default:\n                shiftValue = 0;\n        }\n\n        return shiftValue;\n    }\n\thandleAdd = (value) => {\n\t\tvalue.preventDefault();\n\t\tconst formData = new FormData(value.target),\n\t\t\tformDataObj = Object.fromEntries(formData.entries())\n\n\t\tvar uuid = this.generateUUID();\n\t\tvar shiftTotal = parseInt(formDataObj.quantity) * this.getShiftValue(formDataObj.shift);\n\t\tlet staff = { id: uuid, quantity: formDataObj.quantity, type: formDataObj.staffType, shift: formDataObj.shift, shiftTotal: shiftTotal };\n\n\t\tthis.props.onStaffAdd(staff);\n\t\tthis.handleClose();\n\t}\n\n\t\n\n\thandleClose = () => {\n\t\tthis.setState({ \"show\": false });\n\t}\n\thandleShow = () => {\n\t\tthis.setState({ \"show\": true });\n\t}\n\n\trender() {\n\n\n\t\tlet qtyVals = [];\n\t\tfor (let i = 1; i <= 50; i++) {\n\t\t\tqtyVals.push(i);\n\t\t}\n\t\tconst qtyList = qtyVals.map((qty) =>\n\t\t\t<option key={qty} value={qty}>{qty}</option>\n\t\t);\n\n\t\treturn (\n\t\t\t<Container id=\"resultsCont\" fluid>\n\t\t\t\t<Button variant=\"primary\" onClick={this.handleShow}>Add new Staff</Button>\n\n\n\t\t\t\t<Modal animation={false} show={this.state.show} onHide={this.handleClose}>\n\t\t\t\t\t<Form onSubmit={this.handleAdd}>\n\t\t\t\t\t\t<Modal.Header>\n\t\t\t\t\t\t\t<Modal.Title>Select your staff member</Modal.Title>\n\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t<Modal.Body>\n\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"staffType\" required>\n\t\t\t\t\t\t\t\t<Form.Label>Staff Type</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control as=\"select\" name=\"staffType\">\n\t\t\t\t\t\t\t\t\t<option value=\"RN\">RN</option>\n\t\t\t\t\t\t\t\t\t<option value=\"LVN\">LVN</option>\n\t\t\t\t\t\t\t\t\t<option value=\"Unlicensed\">Unlicensed</option>\n\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"shiftType\" required>\n\t\t\t\t\t\t\t\t<Form.Label>Shift Type</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control as=\"select\" name=\"shift\" className=\"caret\">\n\t\t\t\t\t\t\t\t\t<option value=\"12 Hours Day\">12 Hours Day</option>\n\t\t\t\t\t\t\t\t\t<option value=\"12 Hours Night\">12 Hours Night</option>\n\t\t\t\t\t\t\t\t\t<option value=\"8 Hours Day\">8 Hours Day</option>\n\t\t\t\t\t\t\t\t\t<option value=\"8 Hours Evening\">8 Hours Evening</option>\n\t\t\t\t\t\t\t\t\t<option value=\"8 Hours Night\">8 Hours Night</option>\n\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"quantity\" required>\n\t\t\t\t\t\t\t\t<Form.Label>Quantity</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control as=\"select\" name=\"quantity\">\n\t\t\t\t\t\t\t\t\t{qtyList}\n\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.handleClose}>\n\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\t\tAdd new Staff\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t</Form>\n\t\t\t\t</Modal>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\n\n}\nexport default StaffAdd\n","import React from 'react';\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport './StaffList.css';\n\nclass StaffList extends React.Component {\n   \n  \n\n    render() {\n\n        const staffList = this.props.staffs.map((staff, i) =>\n            <Row key={staff.id} id={staff.id} className=\"border\">\n                <Col className=\"border\">{staff.type}</Col>\n                <Col className=\"border\">{staff.quantity}</Col>\n                <Col className=\"border\">{staff.shift}</Col>\n                <Col className=\"border\">{staff.shiftTotal}</Col>\n            </Row>\n        );\n        \n        return (\n\n            \n            \n            <Container id=\"staffCont\">\n                {staffList.length > 0 ? <Row className=\"border\">\n                    <Col className=\"border\">Staff Type</Col>\n                    <Col className=\"border\">Quantity</Col>\n                    <Col className=\"border\">Shift Type</Col>\n                    <Col className=\"border\">Shift Total</Col>\n                </Row> : false}\n                {staffList}\n            </Container>\n        );\n    }\n}\n\nexport default StaffList;\n","import React from 'react';\nimport './Result.css';\n\nclass Result extends React.Component {\n    // constructor(props) {\n    //     super(props);\n\n    //   }\n\n    getShiftValue = (shiftString) => {\n        //considered changing shift to just be 12,...8 so parseint would just work\n        //but additional information from string i.e. day, night might be needed.\n        let shiftValue = 0;\n        switch (shiftString) {\n            case '12 Hours Day':\n                shiftValue = 12;\n                break;\n            case '12 Hours Night':\n                shiftValue = 12;\n                break;\n            case '8 Hours Day':\n                shiftValue = 8;\n                break;\n            case '8 Hours Evening':\n                shiftValue = 8;\n                break;\n            case '8 Hours Night':\n                shiftValue = 8;\n                break;\n            default:\n                shiftValue = 0;\n        }\n\n        return shiftValue;\n    }\n\n\n    getStaffHours = (staffs) => {\n        let totalHours = 0;\n        for (var i = 0; i < staffs.length; i++) {\n            //Do we need to check on stafftype Here?\n            let shiftValue = this.getShiftValue(staffs[i].shift);\n            let quantity = parseInt(staffs[i].quantity);\n            \n            totalHours += shiftValue * quantity;\n        }\n        return totalHours;\n    }\n\n\n    calculation = (info, staffs) => {\n        //ToDO:  Correct Algorithm needed.  This is a sipmple math check to see \n        //       the values work.\n\n        let bedUnitVal = parseInt(info.bedUnit);\n        let censusVal = parseInt(info.census);\n        let HPPDVal = parseInt(info.HPPD);\n\n        let patients = bedUnitVal * (censusVal/100);\n        \n        let totalHPPD = (patients * HPPDVal)\n\n        let staffHours = this.getStaffHours(staffs);\n        \n\n        return totalHPPD - staffHours;\n\n    }\n\n    render() {\n\n        const calc = this.calculation(this.props.info, this.props.staffs);\n\n        return (\n            <div id=\"results\">\n                <h1 className={ calc <0 ?\"negCalc\" : \"\"}>{calc.toFixed(0)}</h1>\n            </div>\n        );\n    }\n}\n\nexport default Result;\n","import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport './RandomHPPDInfo.css';\n\nclass RandomHPPDInfo extends React.Component {\n   \n    random = (Min,Max) =>{\n\t\tvar Range = Max - Min;   \n\t\tvar Rand = Math.random();   \n\t\treturn (Min + Math.round(Rand * Range));\n\t}\n\t\n\n    setRandomValues = () =>\n      {\n\n        let randomHPPD = this.random(8,24);\n        let randomCensus = this.random(1,100);\n        let randomBedUnit = this.random(10,1000);\n\n        let info ={\n            unit:\"Random Hospital Unit\",\n            HPPD: randomHPPD,\n            bedUnit:randomBedUnit,\n            census: randomCensus,\n        }\n\n\n        this.props.onInfoChange(info); \n  \n      }  \n\n    render() {\n\n\n        return (\n            <div >\n                <Button variant=\"primary\"  onClick={this.setRandomValues}>\n\t\t\t\t\t\t\tGenerate Random\n\t\t\t\t</Button>\n                \n          </div>\n        );\n    }\n}\n\nexport default RandomHPPDInfo;\n","import React from 'react';\nimport { Form, InputGroup, Card } from \"react-bootstrap\";\nimport './Scenario.css';\nimport StaffAdd from './StaffAdd'\nimport StaffList from './StaffList'\nimport Result from './Result'\nimport RandomHPPDInfo from './RandomHPPDInfo'\n\nclass Scenario extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            results:\"\",\n            staffNum:\"The Results:\",\n            num:\"\",\n\t\t\tcenter:{\"text-align\":'center'},\n            staffs: [],\n            info:{\n            \t   unit:\"\",\n            \t   HPPD:\"\",\n                   bedUnit:\"\",\n                   census: 100,\n               }\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    handleStaffChange = (staff) => {\n        this.setState({staffs: staff});\n    }\n    handleStaffAdd = (staffItem)=>{\n\n        console.log(staffItem);\n        let staffCopy = [...this.state.staffs, staffItem];\n        this.setState({staffs: staffCopy});\n\n    }\n\n    handleInfoChange = (info) => {\n        this.setState({info: info});\n    }\n\n\n    handleInputChange(event) {\n\n        //Maybe look at using Formik library?\n        //https://react-bootstrap.github.io/components/forms/#forms-validation-native\n        //https://react-bootstrap.github.io/components/forms/#forms-validation-libraries\n\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        \n        if (name !== 'unit') {\n            if (value &&  !(/^\\+?[1-9][0-9]*$/.test(value))) {\n                alert(\"Only numbers(positive integers) can be entered\");\n                return;\n            }\n        }\n\n        //https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n        this.setState(prevState => {\n            let info = Object.assign({}, prevState.info);   // creating copy of state variable info\n            info[name] = value;                             // update the name property, assign a new value                 \n            return { info };                                // return new object info object\n          })\n        \n    }\n\n\t\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <Card id=\"scenario\">\n                    <Card.Header>Fill out the scenario fields based off of the in-class example.</Card.Header>\n                    <Card.Body>\n                        <Form>\n                            <InputGroup size=\"sm\" className=\"mb-3\">\n                                <p>The hospital unit is</p>\n                                <input type='text' name='unit' value={this.state.info.unit} data-testid=\"unit-id\" onChange={this.handleInputChange} />\n                                <p>and the HPPD is</p>\n                                <input type='text' name=\"HPPD\" value={this.state.info.HPPD} data-testid=\"hppd-id\" id=\"HPPD\" onChange={this.handleInputChange} />\n                                <p>. You have</p>\n                                <input type='text' name=\"bedUnit\" value={this.state.info.bedUnit} data-testid=\"numbeds-id\" onChange={this.handleInputChange} id=\"bedUnit\" />\n                                <p>number of beds in your unit and your census is</p>\n                                <input type='text' name=\"census\" value={this.state.info.census} data-testid=\"census-id\" id=\"census\" onChange={this.handleInputChange} />\n                                <p>% full. Based off of this scenario, allocate your staffing resources.</p>\n                            </InputGroup>\n                        </Form>\n                    </Card.Body>\n                </Card>\n\n                <RandomHPPDInfo  onInfoChange={this.handleInfoChange} />\n                <StaffAdd onStaffChange={this.handleStaffChange} onStaffAdd={this.handleStaffAdd} staffs={this.state.staffs} />\n                <StaffList staffs={this.state.staffs} ></StaffList>\n                <Result staffs={this.state.staffs} info={this.state.info} ></Result>\n            </div>\n        );\n    }\n}\n\nexport default Scenario;\n","export default __webpack_public_path__ + \"static/media/Left-aligned-square-gray-2.11bbe62b.png\";","import './Header.css';\nimport React from 'react';\nimport logo from '../../assets/Left-aligned-square-gray-2.png';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nclass Header extends React.Component {\n\n    onReload = () => {\n        console.log(\"Reload clicked\");\n        window.location.reload();\n    }\n\n    render() {\n        return(\n            <Jumbotron id=\"header\">\n                <img src={logo} alt=\"Logo\" data-testid=\"reload\" onClick={this.onReload}/>\n                <h1>BSU In-Patient Nurse Staffing Simulator</h1>\n            </Jumbotron>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer(){\n    return(\n        <footer id=\"footer\">BSU Nursing |   Dr. Renee Walters   |   reneewalters@boisestate.edu</footer>\n    );\n}\n\nexport default Footer;","import './App.css';\n\nimport Scenario from './components/main/Scenario.js';\nimport Header from './components/header/Header.js';\nimport Footer from './components/footer/Footer.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Scenario />\n      <Footer />\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}